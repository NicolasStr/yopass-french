name: Release on main push

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract base image version from Dockerfile
        id: base-version
        run: |
          base=$(grep -m1 '^FROM' Dockerfile | sed -E 's/FROM\s+[^:]+:(.+)/\1/')
          echo "version=$base" >> $GITHUB_OUTPUT

      - name: Fetch tags
        run: git fetch --tags

      - name: Determine release version
        id: release-version
        run: |
          base_version="${{ steps.base-version.outputs.version }}"
          base_tag_exists=$(git tag -l "${base_version}")
          latest_bump_tag=$(git tag -l "${base_version}-*" --sort=-v:refname | head -n1)

          if [[ -z "$base_tag_exists" && -z "$latest_bump_tag" ]]; then
            # First tag ever
            tag="$base_version"
          elif [[ -z "$latest_bump_tag" ]]; then
            # Base tag exists but no bumps — start from -2
            tag="${base_version}-2"
          else
            bump=$(echo "$latest_bump_tag" | sed -E "s/^${base_version}-([0-9]+)/\1/")
            bump=$((bump + 1))
            tag="${base_version}-${bump}"
          fi

          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "repository=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.release-version.outputs.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.release-version.outputs.tag }}
          flavor: |
            latest=auto

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        id: build-push
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release-version.outputs.tag }}
          name: Release ${{ steps.release-version.outputs.tag }}
          body: |
            ## 📦 Release Summary

            This release was automatically generated from commit [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}).

            ### 🔗 Based on Original Image

            This is a **translated Docker image** based on [`jhaals/yopass`](https://github.com/jhaals/yopass).	
            👉 Refer to the [Installation & Configuration Guide](https://github.com/jhaals/yopass/tree/master?tab=readme-ov-file#installation--configuration) for setup instructions.

            ### 🧱 Base Image
            - **Base image version**: `${{ steps.base-version.outputs.version }}`

            ### 🌍 Translations
            - Includes translated strings from `en.json` and `fr.json`
            - All required translation keys are present

            ### 🏷 Version Tag
            `${{ steps.release-version.outputs.tag }}`

            ### 🐳 How to use this translated image

            Use this image instead of the upstream one to enable French translations in the web UI:

            ```sh
            docker pull ghcr.io/${{ github.repository }}:${{ steps.release-version.outputs.tag }}
            docker run --rm ghcr.io/${{ github.repository }}:${{ steps.release-version.outputs.tag }}
            ```

            Or always use the latest version:
            ```sh
            docker pull ghcr.io/${{ github.repository }}:latest
            ```

            ---
            This release was automatically generated by the GitHub Actions workflow.