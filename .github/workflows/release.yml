name: Create Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git fetch --tags

      - name: Extract base image version from Dockerfile
        id: extract
        run: |
          BASE_IMAGE_LINE=$(grep -i '^FROM' Dockerfile | head -n 1)
          BASE_IMAGE=$(echo "$BASE_IMAGE_LINE" | awk '{print $2}')
          IMAGE_TAG=$(echo "$BASE_IMAGE" | cut -s -d':' -f2)
          echo "image_tag=${IMAGE_TAG:-latest}" >> $GITHUB_OUTPUT

      - name: Detect if FROM line changed in last commit
        id: detect
        run: |
          FROM_CHANGED=$(git show -1 -- Dockerfile | grep '^[-+]' | grep -i '^[-+]FROM' || true)
          if [ -n "$FROM_CHANGED" ]; then
            echo "from_changed=true" >> $GITHUB_OUTPUT
          else
            echo "from_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Compute release tag
        id: version
        run: |
          BASE_TAG="${{ steps.extract.outputs.image_tag }}"
          if [ "${{ steps.detect.outputs.from_changed }}" = "true" ]; then
            echo "release_tag=$BASE_TAG" >> $GITHUB_OUTPUT
          else
            PREFIX="$BASE_TAG-"
            EXISTING=$(git tag --list "$PREFIX*" | sed "s/^$PREFIX//" | sort -nr | head -n1)
            NEXT=${EXISTING:-0}
            NEXT=$((NEXT + 1))
            echo "release_tag=${PREFIX}${NEXT}" >> $GITHUB_OUTPUT
          fi

      - name: Get previous release tag
        id: previous
        run: |
          TAG=$(git describe --tags --abbrev=0 || echo "")
          echo "previous_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -z "${{ steps.previous.outputs.previous_tag }}" ]; then
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          else
            LOG=$(git log --pretty=format:"- %s (%an)" ${{ steps.previous.outputs.previous_tag }}..HEAD)
            LOG_ESCAPED="${LOG//'%'/'%25'}"
            LOG_ESCAPED="${LOG_ESCAPED//$'\n'/'%0A'}"
            echo "changelog=$LOG_ESCAPED" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.release_tag }}
          name: Release ${{ steps.version.outputs.release_tag }}
          body: |
            Automated release for merged PR:

            - Base image version: `${{ steps.extract.outputs.image_tag }}`
            - FROM line updated: `${{ steps.detect.outputs.from_changed }}`
            - Tag: `${{ steps.version.outputs.release_tag }}`

            ### Changes since last release
            ${{ steps.changelog.outputs.changelog }}